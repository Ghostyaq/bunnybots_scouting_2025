---
title: "Learn-R-Here"
format: html
---

List of Things to Teach:

-   Variables

-   Dataframes

-   Basic Shinyapp

-   Fake Data Creation

-   Creating actual graphs based on Fake Data

-   Testing Testing 123

-   testing again, but Gabriel's machine this time

## Planning for teaching R

Write basic histogram

```{r}
#make sure to install these packages first 
library(dslabs) #Explain libraries
library(ggplot2) 
library(tidyverse)
library(scales)

raw = murders #use equal sign if no programming experience beforehand, use <- if they have experience

hist(raw$total) #have time figure this out with ?hist or help(hist), then reading the documentation
```

```{r}
#Dataframes...
#What are they?

x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y <- 1:10
# does x = y?

z <- data.frame(x, y)
#how would I access the x data? y data?
#how would I access a specific datapoint? z$x[4]

#what is tidy data?
#go to the slideshow https://docs.google.com/presentation/d/1EegeSUDCqnyg5rroPHMdVEJu8JtvQhFOtKkQcoXN7e8/edit?usp=sharing


```

Write graph of murder_rate vs state

```{r}
raw <- murders |> #Explain the pipe operator
    mutate( #explain why we used mutate
        murder_rate = total/population * 10^6
    )

#raw$murder_rate <- raw$total / raw$population * 10^6   #alternative method, but gets annoying after more than one change

ggplot(raw, aes(x = total, y = murder_rate)) +  #explain the ggplot library/function, explain the aesthetics
    geom_point() + 
    geom_text(aes(label = abb), nudge_y = 20)
```

Connect with the scouting2025 repo through "New Project", link GitHub, gain access to the shinyapp/data_files/newton/data.csv.

Write this in a new file (in the scouting2025)

```{r}
raw <- read.csv("shinyapp/data_files/newton/data.csv")
#choices: 422, 449, 1323, 2910
selected_teams <- c(422, 449, 1323, 2910) #explain c() -> maybe go into a tangent about R programming being mainly about vectors/lists, dataframes/tidies, etc.

past_match_points <- raw |>
    group_by(team) |>
    mutate(team = as.factor(team)) |>
    filter(team %in% selected_teams) |>
    summarize(
        team = team,
        match = match,
        total_score = 
            move*3 +
            auto_coral_L1_num*3 + auto_coral_L2_num*4 + auto_coral_L3_num*6 + auto_coral_L4_num*7 +
            robot_net_score*4 + proc_score*2.5 +
            coral_L1_num*2 + coral_L2_num*3 + coral_L3_num*4 + coral_L4_num*5 +
            ifelse(ending =="D", 12, ifelse(ending=="S",6,ifelse(ending=="P", 2, 0))),
    )

team_colors <- setNames(hue_pal()(length(levels(past_match_points$team))), levels(past_match_points$team))

ggplot(past_match_points, aes(x = match, y = total_score, color = team, group = team)) + 
    geom_line(size = 1) +
    geom_point(size = 2) + 
    scale_fill_manual(values = team_colors) +
    #scale_y_continuous(limits = c(0, max(past_match_points$total_score, na.rm = TRUE))) +
    #scale_x_continuous(breaks = unique(past_match_points$match)) +
    #labs(title = "Points Over Time", x = "Match", y = "Total Score", color = "Team") +
    theme_minimal()
```

After this, I guess take the rookie through the ShinyApp and see if there's anything in particular they would like to code.

Extra Thoughts: Go through the shinyapp - Look at the Newton data. Then, selected Alliance 4 and Alliance 8 to analyze. Give context: If we don't win this match, we're out of the season. Give statbotics statistics: 72% chance we lose. They predicted the score of 228 - 254 (R - B).

Game Strategy Process: Identify who we think is going to play in the match. Take those robots, then plug it into the 'Select 6 Teams' feature for easier visualization. Generate our graphs. Let our rookies make some predictions: What will each robot do? Allow them to explore the Compare Teams tab or Single Team tab to look for comments. Try to get the rookies to predict what happens, give each rookie a strategy board and challenge them to come up with their own strategy for our robots. Then, watch the actual match.

```{r}
#let rookies explore variables we want to collect -> take their input

#let's start doing bunnybots stuff! we should probably run through an exercise involving them generating fake data! reference the generating_data.qmd

#sample(x, size, replace = ?, )
#df <- data.frames?
#write_csv(df, file = "made_up_data.csv")

#This should take ~15-30 minutes top


```

```{r}
#Instructions: Run through this with whoever's there (most likely Margaret), maybe grab a whiteboard and marker to explain directories and how to move through them.
#Goal: Program the cycle history graph (found in the shinyapp, "https://mitchell-ghosty33.shinyapps.io/2025_Reefscape_Shinyapp/", Single Team -> Cycle History)
#Notes: EXPECT THIS TO TAKE A WHILE, try your best to let them discover the process. For example, remind them of maybe using the pipe operator, mutate function, filter function, and select function. Feel free to not incorporate all code on the first run-through -> Go back to refine it after you get the inital line.

getwd() #Where is this code running? In THIS code block, we're in bunnybots_scouting_2025. 
raw <- read.csv("shinyapp/data_files/fake_data.csv") #Since shinyapp is on this level, we can enter shinyapp, then enter data_files, then enter fake_data.csv

selected <- 449 #we only want to display data for one team right now

#What to do next? 
#In order to graph things, we need to manipulate data -> common practice (for us) is to place this into a new dataframe with only the variables we need. In this case, we want total cycles per match. But how do we do this?
#Currently, we have auto_lunites_missed, auto_lunites_high, auto_lunites_low, teleop_preshutdown_high_lunites_scored, teleop_preshutdown_low_lunites_scored, teleop_preshutdown_lunites_missed, teleop_preshutdown_lunites_passed, post_high_lunites_scored, post_low_lunites_scored, post_lunites_missed, post_lunites_passed
#That's a lot! But we want to condense that into one cycle variable; how do we do that?

data <- raw |>
    filter(team_number == selected) |>
    mutate(
        #optional part if we want to distinguish between auto and tele
        auto_cycles = auto_lunites_missed + auto_lunites_high + auto_lunites_low,
        
        tele_cycles = 
            teleop_preshutdown_high_lunites_scored +
            teleop_preshutdown_low_lunites_scored + 
            teleop_preshutdown_lunites_missed + 
            teleop_preshutdown_lunites_passed +
            post_high_lunites_scored + 
            post_low_lunites_scored + 
            post_lunites_missed + 
            post_lunites_passed,
        
        total_cycles = auto_cycles + tele_cycles #this is the important part <- graph 1st
        )|>
    select(match_number, team_number, auto_cycles, tele_cycles, total_cycles) 
#Only select the columns/variables we are interested in (best practices)

#We want to ggplot with our modified dataframe (data). We set the x-axis to be equal to the matches, since we're graphing by match
ggplot(data, aes(x = match_number)) + 
    geom_line(aes(y = total_cycles), color = "black") + #Represents total_cycles per match
    geom_line(aes(y = auto_cycles), color = "red") + #optional
    geom_line(aes(y = tele_cycles), color = "blue") + #optional
    scale_y_continuous() + #optional, prettifies
    scale_x_continuous(breaks = data$match_number) + #optional, tells us specific matches 
    labs( #optional, it's just the title and labels
        title = "Cycle Summary",
        x = "Match",
        y = "Auto (red) || Tele (blue) || Total (black)"
    ) +
    theme_bw() #NOT OPTIONAL (will be ugly without so it's kinda optional :])
    
    
```

\
